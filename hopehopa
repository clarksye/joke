repeat task.wait() until game:IsLoaded()

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

-- Config
local VERSION_LIMIT = 1233
local PLACE_ID = game.PlaceId
local DATA_FILE = "server_data.json"

-- Inisialisasi data
local function initData()
    if not isfile(DATA_FILE) then
        writefile(DATA_FILE, HttpService:JSONEncode({
            used = {},
            notused = {},
            servers = {}
        }))
    end
end

-- Helper functions
local function safeLoad()
    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile(DATA_FILE))
    end)
    return success and data or {used = {}, notused = {}, servers = {}}
end

local function safeSave(data)
    pcall(function()
        writefile(DATA_FILE, HttpService:JSONEncode(data))
    end)
end

local function isInTable(tbl, item)
    for _, v in pairs(tbl) do
        if v == item then
            return true
        end
    end
    return false
end

-- Proses server saat ini
local function processCurrentServer()
    local data = safeLoad()
    local jobId = game.JobId
    
    if not isInTable(data.used, jobId) then
        table.insert(data.used, jobId)
        
        if game.PlaceVersion <= VERSION_LIMIT then
            local versionKey = "version_"..game.PlaceVersion
            data.servers[versionKey] = data.servers[versionKey] or {}
            table.insert(data.servers[versionKey], jobId)
        end
        
        safeSave(data)
    end
end

-- Ambil server baru dari API
local function fetchNewServers()
    local data = safeLoad()
    local cursor = ""
    
    repeat
        local url = "https://games.roblox.com/v1/games/"..PLACE_ID.."/servers/Public?sortOrder=Asc&limit=100"
        if cursor ~= "" then
            url ..= "&cursor="..cursor
        end
        
        local success, response = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)
        
        if not success then break end
        
        for _, server in pairs(response.data) do
            local serverId = server.id
            if not isInTable(data.used, serverId) and not isInTable(data.notused, serverId) then
                table.insert(data.notused, serverId)
            end
        end
        
        cursor = response.nextPageCursor or ""
    until cursor == ""
    
    safeSave(data)
end

-- Teleport ke server berikutnya
local function tryTeleport()
    local data = safeLoad()
    
    if #data.notused == 0 then
        fetchNewServers()
        data = safeLoad()
    end

    if #data.notused > 0 then
        local targetId = data.notused[1]
        table.remove(data.notused, 1)
        table.insert(data.used, targetId)
        safeSave(data)
        
        local success, err = pcall(function()
            TeleportService:TeleportToPlaceInstance(
                PLACE_ID,
                targetId,
                Players.LocalPlayer
            )
        end)
        
        wait(6)
        tryTeleport()
    else
        warn("Tidak ada server tersedia")
    end
end

-- Main execution
initData()
processCurrentServer()
tryTeleport()
