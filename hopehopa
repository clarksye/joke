repeat task.wait() until game:IsLoaded()

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

-- Config
local VERSION_LIMIT = 1233
local PLACE_ID = game.PlaceId
local DATA_FILE = "server_data.json"
local LOCK_TIMEOUT = 10
local RETRY_DELAY = 2

-- Atomic file operations
local function acquireLock()
    local start = os.time()
    while os.time() - start < LOCK_TIMEOUT do
        if not isfile(DATA_FILE..".lock") then
            writefile(DATA_FILE..".lock", "LOCK")
            return true
        end
        task.wait(0.1)
    end
    return false
end

local function releaseLock()
    pcall(delfile, DATA_FILE..".lock")
end

local function loadData()
    if not isfile(DATA_FILE) then return nil end
    return HttpService:JSONDecode(readfile(DATA_FILE))
end

local function saveData(data)
    writefile(DATA_FILE, HttpService:JSONEncode(data))
end

-- Transaction system
local function atomicTransaction(operation)
    if not acquireLock() then return nil end
    
    local result
    local data = loadData() or {used = {}, notused = {}, servers = {}}
    local success, err = pcall(function()
        result = operation(data)
    end)
    
    if success and result ~= nil then
        saveData(result)
    end
    
    releaseLock()
    return result and true or false
end

-- Server processing
local function processCurrentServer()
    atomicTransaction(function(data)
        local jobId = game.JobId
        if not table.find(data.used, jobId) then
            table.insert(data.used, jobId)
            
            if game.PlaceVersion <= VERSION_LIMIT then
                local versionKey = "version_"..game.PlaceVersion
                data.servers[versionKey] = data.servers[versionKey] or {}
                table.insert(data.servers[versionKey], jobId)
            end
        end
        return data
    end)
end

-- Server fetcher
local function fetchServers()
    local cursor = ""
    local newServers = {}
    
    repeat
        local url = "https://games.roblox.com/v1/games/"..PLACE_ID.."/servers/Public?sortOrder=Asc&limit=100"
        if cursor ~= "" then url ..= "&cursor="..cursor end
        
        local success, response = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(url))
        end)
        
        if not success then break end
        
        for _, server in pairs(response.data) do
            if not table.find(newServers, server.id) then
                table.insert(newServers, server.id)
            end
        end
        
        cursor = response.nextPageCursor or ""
    until cursor == ""
    
    return newServers
end

-- Main hopper
local function serverHopper()
    while true do
        local reservedServer
        local success = atomicTransaction(function(data)
            if #data.notused == 0 then
                local newServers = fetchServers()
                for _, id in ipairs(newServers) do
                    if not table.find(data.used, id) then
                        table.insert(data.notused, id)
                    end
                end
            end
            
            if #data.notused > 0 then
                reservedServer = table.remove(data.notused, 1)
                table.insert(data.used, reservedServer)
                return data
            end
        end)
        
        if reservedServer then
            local success, err = pcall(function()
                TeleportService:TeleportToPlaceInstance(
                    PLACE_ID,
                    reservedServer,
                    Players.LocalPlayer
                )
            end)
            
            task.wait(6)
        else
            task.wait(RETRY_DELAY)
        end
    end
end

-- Initialization
if not isfile(DATA_FILE) then
    atomicTransaction(function(data) return data end)
end

processCurrentServer()
serverHopper()
